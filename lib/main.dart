import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:sumeeb_chat/cubits/chat-connection/chat_connection_cubit.dart';
import 'package:sumeeb_chat/cubits/storage/storage_cubit.dart';

import 'app.dart';
import 'cubits/auth_cubit.dart';
import 'cubits/contacts_cubit.dart';
import 'repositories/firestore_repository.dart';
import 'package:awesome_notifications/awesome_notifications.dart';
import 'package:permission_handler/permission_handler.dart';

// IMPORTANT: Replace firebase_options.dart with the file generated by `flutterfire configure`.
// import 'firebase_options.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();

  final firestoreRepo = FirestoreRepository();
  AwesomeNotifications().initialize('resource://drawable/launcher_icon', [
    NotificationChannel(
      channelKey: 'basic_channel',
      channelName: 'Basic notifications',
      channelDescription: 'Used for wallet and app alerts',
      defaultColor: Color.fromARGB(255, 82, 101, 140),
      ledColor: Colors.white,
      importance: NotificationImportance.High,
      channelShowBadge: true,
    ),
  ], debug: true);
  // configure API key inside the file or via env
  bool isAllowed = await AwesomeNotifications().isNotificationAllowed();
  if (!isAllowed) {
    // This will trigger a permission dialog on Android 13+ and iOS
    await AwesomeNotifications().requestPermissionToSendNotifications();
  }
  try {
    String? token = await FirebaseMessaging.instance.getToken();
    print(" <===== Token: $token =====>");
  } catch (error) {
    print("Error getting FCM token: $error");
  }
  runApp(
    MultiBlocProvider(
      providers: [
        BlocProvider(create: (_) => AuthCubit(firestoreRepo)),
        BlocProvider(create: (_) => ContactsCubit(firestoreRepo)),
        BlocProvider(create: (_) => StorageCubit()),
        BlocProvider(create: (_) => ChatConnectionCubit()),
      ],
      child: MyApp(),
    ),
  );
}
